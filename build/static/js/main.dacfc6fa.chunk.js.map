{"version":3,"sources":["services/numbers.js","App.js","reportWebVitals.js","index.js"],"names":["baseUrl","numberService","getAll","axios","get","then","response","data","create","newObject","post","deleteNumber","id","delete","updateNumber","put","Notification","message","error","className","Number","person","name","number","type","value","onClick","window","confirm","Numbers","props","filtered","persons","filter","toLowerCase","includes","map","PersonForm","onSubmit","submit","onChange","handlers","Filter","handler","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","newFilter","setNewFilter","notifyMessage","setNotifyMessage","isError","setIsError","useEffect","initialNumbers","timedNotification","time","setTimeout","event","target","preventDefault","duplicatePerson","length","personObject","returnedObject","concat","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dacfc6fa.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n\tconst request = axios.get(baseUrl)\n\treturn request.then(response => response.data)\n}\n\nconst create = newObject => {\n\tconst request = axios.post(baseUrl, newObject)\n\treturn request.then(response => response.data)\n}\n\nconst updateNumber = (newObject, id) => {\n\tconst request = axios.put(`${baseUrl}/${id}`, newObject)\n\treturn request.then(response => response.data)\n}\n\nconst deleteNumber = id => {\n\tconst request = axios.delete(`${baseUrl}/${id}`)\n\treturn request.then(response => response.data)\n}\n\nconst numberService = { getAll, create, deleteNumber, updateNumber }\n\nexport default numberService\n","import React, { useState, useEffect } from 'react'\nimport numberService from './services/numbers.js'\n\nconst Notification = ({ message, error }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={error ? \"error\" : \"notice\"}>\n      {message}\n    </div>\n  )\n}\n\nconst Number = ({ person, deleteNumber }) => {\n  const handleDelete = () => { \n    if (window.confirm(`Delete ${person.name} ?`)) {\n      deleteNumber(person.id)\n    }   \n  }\n\n  return (\n    <div>\n      {person.name} {person.number} <input type=\"button\" value=\"delete\" onClick={handleDelete} />\n    </div>\n  )\n}\n\nconst Numbers = (props) => {\n  const filtered = props.persons.filter((person) => {\n    return person.name.toLowerCase().includes(props.filter.toLowerCase())\n  })\n\n  return (\n    <div>\n      {filtered.map((person) => {\n          return (\n            <Number\n              key={person.id} \n              person={person} \n              deleteNumber={props.deleteNumber}\n            />\n        )\n      }\n       )}\n    </div>\n  )\n}\n\nconst PersonForm = (props) => {\n\n  return ( \n    <form onSubmit={props.submit}>\n      <div>\n        name: <input onChange={props.handlers.name} />\n      </div>\n      <div>\n        number: <input onChange={props.handlers.number} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Filter = (props) => {\n\n  return (\n      <div>filter shown with <input onChange={props.handler} /></div>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, setNewFilter ] = useState('')\n  const [ notifyMessage, setNotifyMessage] = useState(null)\n  const [isError, setIsError] = useState(false)\n\n  useEffect(() => {\n    numberService\n      .getAll()\n      .then(initialNumbers => {\n        setPersons(initialNumbers)\n      })\n  }, [])\n\n  const addName = (event) => {\n    event.preventDefault()\n    const duplicatePerson = persons.filter((person) => person.name === newName)\n\n    if (duplicatePerson.length !== 0) {\n\n      if(window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        const personObject = { \n          'name': newName, \n          'number': newNumber, \n        }\n        numberService\n          .updateNumber(personObject, duplicatePerson[0].id)\n          .then(returnedObject => {\n            setPersons(persons\n              .filter(person => person.id !== returnedObject.id)\n              .concat(returnedObject)\n            )\n            timedNotification(`Updated ${returnedObject.name}`, 5000)\n          })\n          .catch(error => {\n            timedNotification(`Information of ${personObject.name} has already been removed from server`, 5000, true)\n          })\n      }\n    } else {\n      const personObject = { \n        'name': newName, \n        'number': newNumber, \n      }\n\n      numberService\n        .create(personObject)\n        .then(returnedObject => {\n          setPersons(persons.concat(returnedObject))\n          timedNotification(`Added ${returnedObject.name}`, 5000)\n        })\n    }\n  }\n\n  const timedNotification = (message, time, error=false) => {\n    setIsError(error)\n    setNotifyMessage(message)\n    setTimeout(() => {\n      setNotifyMessage(null)\n    }, time)\n  }\n\n  const deleteNumber = (id) => {\n    numberService\n      .deleteNumber(id)\n      .then(setPersons(persons.filter(person => person.id !== id)))\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value);\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notifyMessage} error={isError} />\n      <Filter handler={handleFilterChange} />\n      <h3>add a new</h3>\n      <PersonForm submit={addName} handlers={{ 'name' : handleNameChange, 'number' : handleNumberChange }} />\n      <h3>Numbers</h3>\n      <Numbers persons={persons} filter={newFilter} deleteNumber={deleteNumber} />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}